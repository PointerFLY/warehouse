Exercise 1.1
12
8
3
6
19
#f
4
16
6
16

Exercise 1.2
(/ (+ 5 4 
	   (- 2 
     		 (- 3 
 	          (+ 6 4/5))))
   (* 3 
	 (- 6 2)
	 (- 2 7)))

Exercise 1.3
(define (func x y z)
(cond ((and (< x y) (< x z)) (+ (* y y) (* z z)))
	 ((and (< y x) (< y z)) (+ (* x x) (* z z)))
	 (else (+ (* x x) (* y y)))
))

Exercise 1.4
return a plus |b|

Exercise 1.5
applicative-order:
(test 0 (p))
procedure will be in infinite loop
normal-order: 
if (= 0 0)) 0 (p))
return 0


